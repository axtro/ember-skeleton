APPNAME = 'ember-skeleton'

require 'rake-pipeline-web-filters'

require File.join(File.dirname(__FILE__), 'support/ember_strip_debug_filter/ember_strip_debug_filter')
require File.join(File.dirname(__FILE__), 'support/precompiling_handlebars_filter/precompiling_handlebars_filter')

SHOULD_UGLIFY = ENV['RAKEP_MODE'] == 'production'

output 'assets'

class BOMFilter < Rake::Pipeline::Filter
  def generate_output(inputs, output)
    inputs.each do |input|
      output.write("\uFEFF" + input.read)
    end
  end
end

input 'app' do
  match '{lib,vendor}/**/*.js' do
    minispade :module_id_generator => proc { |input|
                input.path.sub(/^lib\//, "#{APPNAME}/").sub(/\.js$/, '')
              },
              :string => !SHOULD_UGLIFY,
              :rewrite_requires => true

    if SHOULD_UGLIFY
      filter EmberStripDebugFilter
      uglify
    end

    concat %w[
      vendor/jquery.js
      vendor/ember.js
    ], 'app.js'
  end

  match 'templates/**/*.handlebars' do
    filter PrecompilingHandlebarsFilter,
      :key_name_proc => proc { |input| input.path.sub(/^templates\//, '').sub(/\.handlebars$/, '') },
      :precompile => SHOULD_UGLIFY

    minispade :module_id_generator => proc { |input|
                input.path.sub(/^templates\//, "#{APPNAME}/~templates/").sub(/\.handlebars$/, '').sub(/\.js$/, '')
              },
              :string => !SHOULD_UGLIFY,
              :rewrite_requires => true
      
    if SHOULD_UGLIFY
      uglify
    end
    concat 'app.js'
  end

  match 'tests/**/*.js' do
    minispade :module_id_generator => proc { |input|
                input.path.sub(/^lib\//, "#{APPNAME}/").sub(/\.js$/, '')
              },
              :string => !SHOULD_UGLIFY,
              :rewrite_requires => true
      
    concat 'app-tests.js'
  end

  match 'css/**/*.css' do
    if SHOULD_UGLIFY
      yui_css
    end
    
    concat ['bootstrap.css', 'main.css'], 'app.css'
  end

  match 'css/**/*.scss' do
    sass
    if SHOULD_UGLIFY
      yui_css
    end
    concat 'app.css'
  end

  match "static/**/*" do
    concat do |input|
      input.sub(/static\//, '')
    end
  end

  match "app.css,app.js" do
    filter BOMFilter
  end
end

# vim: filetype=ruby
